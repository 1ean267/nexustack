/*
 * This file is part of the nexustack (https://github.com/1ean267/nexustack) distribution.
 *
 * Copyright (c) Cato Truetschel and contributors. All rights reserved.
 * Licensed under the MIT license. See LICENSE file in the project root for details.
 */

use super::{OAuthFlowsObject, ReferenceObject, SecuritySchemeLocation, SecuritySchemeType};
use serde::{Deserialize, Serialize};

/// Defines a security scheme that can be used by the operations.
///
/// Supported schemes are HTTP authentication, an API key
/// (either as a header, a cookie parameter or as a query parameter), mutual TLS
/// (use of a client certificate), `OAuth2`'s common flows
/// (implicit, password, client credentials and authorization code) as defined in RFC6749, and
/// `OpenID Connect` Discovery. Please note that as of 2020, the implicit flow is about to be deprecated
/// by OAuth 2.0 Security Best Current Practice. Recommended for most use case is Authorization Code Grant
/// flow with PKCE.
/// See <https://swagger.io/specification/#security-scheme-object>
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SecuritySchemeObject {
    /// REQUIRED. The type of the security scheme.
    #[serde(rename = "type")]
    pub r#type: SecuritySchemeType,

    /// A description for security scheme. `CommonMark` syntax MAY be used for rich text representation.
    #[serde(
        rename = "description",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,

    /// REQUIRED. The name of the header, query or cookie parameter to be used.
    #[serde(rename = "name", default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    /// REQUIRED. The location of the API key.
    #[serde(rename = "in", default, skip_serializing_if = "Option::is_none")]
    pub r#in: Option<SecuritySchemeLocation>,

    /// REQUIRED.
    /// The name of the HTTP Authorization scheme to be used in the Authorization header as defined in RFC7235.
    /// The values used SHOULD be registered in the IANA Authentication Scheme registry.
    #[serde(rename = "scheme", default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,

    /// A hint to the client to identify how the bearer token is formatted.
    /// Bearer tokens are usually generated by an authorization server, so this information is primarily for
    /// documentation purposes.
    #[serde(
        rename = "bearerFormat",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub bearer_format: Option<String>,

    /// REQUIRED. An object containing configuration information for the flow types supported.
    #[serde(rename = "flows", default, skip_serializing_if = "Option::is_none")]
    pub flows: Option<Box<OAuthFlowsObject>>,

    /// REQUIRED. `OpenId Connect` URL to discover `OAuth2` configuration values.
    /// This MUST be in the form of a URL.
    /// The `OpenID` Connect standard requires the use of TLS.
    #[serde(
        rename = "openIdConnectUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub open_id_connect_url: Option<String>,

    /// Vendor extension: The name of the token parameter used for authentication.
    /// This is a non-standard field, typically used to specify the token name in custom security schemes.
    #[serde(
        rename = "'x-tokenName'", // TODO: Are the single quotes correct here?
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub x_token_name: Option<String>,
}

/// Represents either an [`SecuritySchemeObject`] or [`ReferenceObject`] object.
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum SecuritySchemeOrReferenceObject {
    /// An inline security schema object.
    SecurityScheme(SecuritySchemeObject),
    /// A reference to a security schema object.
    Reference(ReferenceObject),
}
